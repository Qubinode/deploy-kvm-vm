---
- name: setting vm_ip if user provided ip address
  set_fact:
    vm_ip: "{{ vm_ipaddress }}"
  when: vm_ipaddress is defined and vm_ipaddress | length != 0

# This requires a later version ansible
- name: generate random mac address when vm_ip defined
  set_fact:
    vm_mac: "{{ '52:54:00' | random_mac }}"
  when: vm_name not in all_instances.list_vms

- name: Check if qcow OS image template exist
  stat:
    path: "{{ os_qcow_template }}"
  register: cloud_init_image_exist

- name: fail if {{ os_qcow_template }} does not exist
  fail:
    msg: |
         The qcow os template {{ os_qcow_template }} does not exist.
         Please verify the variable os_qcow_template is set to the correct path
         or copy {{ cloud_init_vm_image }} to {{ os_qcow_template }}.
  when: cloud_init_image_exist.stat.exists == False

- name: Generate cloud-init static network config
  template:
    src: network-config.j2
    dest: "{{ cloud_init_network_config }}"
    mode: 0777
  register: user_data_cloud_init
  when: static_ip|bool

- name: Generate cloud-init user data
  template:
    src: user-data.j2
    dest: "{{ cloud_init_user_data }}"
    mode: 0777
  register: user_data_cloud_init

- name: Generate cloud-init meta data
  template:
    src: meta-data.j2
    dest: "{{ cloud_init_meta_data }}"
    mode: 0777
  register: meta_data_cloud_init

- name: show qcow image
  debug:
    msg: 
      - "cloud_init_vm_image: {{ cloud_init_vm_image }}"
      - "os_disk: {{ os_disk }}"
      - "vm_root_disk_size: {{ vm_root_disk_size }}"
      - "os_qcow_template: {{ os_qcow_template }}"

- name: Deploy VM disk image
  block:
    - name: Create operating system disk for vm
      command: "qemu-img create -f qcow2 {{ os_disk }} {{ vm_root_disk_size }}"
      args:
        creates: "{{ os_disk }}"
      register: os_disk_results
      when: expand_os_disk|bool

    - name: Copy {{ cloud_init_vm_image }} to {{ os_disk }}
      command: "cp {{ os_qcow_template }} {{ os_disk }}"
      args:
        creates: "{{ os_disk }}"
      register: os_disk_results
      when: not expand_os_disk|bool

    - name: Verify operating system disk for vm exists
      stat:
        path: "{{ os_disk }}"
      register: os_disk_created

    - name: get operating system disk virtual size
      shell: >
        qemu-img info "{{ os_disk }}" | awk '/disk size/ {print $3}'
      register: os_virtual_disk_size
      changed_when: false

    - name: set os disk size to human readable format
      set_fact:
        os_disk_size: "{{ os_virtual_disk_size.stdout | human_to_bytes }}"
      when: os_disk_created.stat.exists

    - name: set variable grow_fs
      set_fact:
        grow_fs: "{{ true if os_disk_created.stat.exists and os_disk_size|int < '1073741824'|int else false }}"

    - name: Push base image onto vm operating system disk
      command: >
        virt-resize --expand /dev/sda1 "{{ os_qcow_template }}" "{{ os_disk }}"
      register: resize_os_disk_results
      changed_when: '"Resize operation completed with no errors" in resize_os_disk_results.stdout'
      when: grow_fs|bool and expand_os_disk|bool

    - name: Grow root file system to size to the requested disk size
      command: /usr/local/bin/qubi-virt-customize -a {{ os_disk }} --run-command 'xfs_growfs /'
      register: grow_os_disk_results
      changed_when: '"Finishing off" in grow_os_disk_results.stdout'
      when: grow_fs and expand_os_disk|bool
  when: vm_name not in all_instances.list_vms

  #- name: Set VM root password
  #  command: >
  #    /usr/local/bin/qubi-virt-customize -a {{ os_disk }} --root-password password:{{ kvm_vm_root_pwd }}
  #  register: mod_os_disk_results
  #  changed_when: '"Finishing off" in mod_os_disk_results.stdout'
  #  when: grow_os_disk_results.changed

- name: check for existing cloud init iso
  stat:
    path: "{{ cloud_init_iso_image }}"
  register: cloud_init_iso

- name: set cloud-init config files
  set_fact:
    cloud_init_configs: "{{ cloud_init_user_data }} {{ cloud_init_meta_data }} {{ cloud_init_network_config }}"
  when: static_ip|bool

- name: Create iso image for cloud init
  shell: "genisoimage -input-charset utf-8 -output {{ cloud_init_iso_image }} -volid cidata -joliet -r {{ cloud_init_configs }}"
  when: user_data_cloud_init.changed or cloud_init_iso.stat.exists == False

- name: generate virt-install command arguments
  template:
    src: virt-install-cmd.j2
    dest: "{{ vm_virtinstall_script }}"
    mode: 0755
  when: vm_name not in all_instances.list_vms

- name: deploy VM instance
  command: "bash -x {{ vm_virtinstall_script }}"
  when: vm_name not in all_instances.list_vms
  register: deploy_vm
  failed_when: "('Domain installation does not' in deploy_vm.stderr) or
                ('failed to' in deploy_vm.stderr) or
                ('ERROR' in deploy_vm.stderr) or
                ('usage' in deploy_vm.stderr)"

- debug:
    msg: "{{ deploy_vm }}"
    verbosity: 2

- name: create extra qcow disk
  vars:
    disk_name: "{{ extra_disk_name }}_vd{{ disk_sequence[item | int + count ] }}.qcow2"
  command: >
    dd if=/dev/zero of={{ disk_name }} bs=1 count=0  seek={{ item.size }}
  args:
    creates: "{{ disk_name }}"
  loop: "{{ extra_storage }}"
  loop_control:
    index_var: count
    label: "{{ disk_name }}"
  when: item.enable
  register: extra_disk_created

- debug:
    msg: "{{ extra_disk_created }}"
    verbosity: 2

- name: Attach External Disk
  vars:
    disk_name: "{{ extra_disk_name }}_vd{{ disk_sequence[item | int + count ] }}.qcow2"
    disk: "vd{{ disk_sequence[item | int + count ] }}"
  command: >
    /usr/local/bin/attach-libvirt-disk "{{ vm_name }}" "{{ disk_name }}" "{{ disk }}"
  register: attached_disk
  loop: "{{ extra_storage }}"
  loop_control:
    index_var: count
    label: "{{ disk_name }}"
  when: item.enable
  changed_when: '"Disk attached successfully" in attached_disk.stdout'

- name: Check if cd-rom is attached
  shell: >
    virsh domblklist "{{ vm_name }}" | grep "{{ cidata_iso_name }}"|cat
  register: check_cdrom
  changed_when: false

- name: wait for cloud-init to initialize
  pause:
    seconds: 50
  when: vm_name not in all_instances.list_vms

- name: Eject CD-Rom
  shell: "virsh change-media {{ vm_name }} {{ check_cdrom.stdout.split()[0] }} --eject"
  when: check_cdrom.stdout != ""

- name: try to discover {{ vm_name }} ip address
  command: "/usr/local/bin/getvmip -r {{ vm_name }}"
  until: dhcp_vm_ip.stdout != ""
  ignore_errors: yes
  retries: 30
  delay: 1
  register: dhcp_vm_ip
  changed_when: False

- name: set ip address
  set_fact:
    vm_ip: "{{ dhcp_vm_ip.stdout }}"
  when: not static_ip|bool

- fail:
    msg: "Could not find the ip address for the VM {{ vm_name }}."
  when: vm_ip is not defined or vm_ip | length == 0

- name: set dhcp provided ip address as static
  import_tasks: set-dhcp-to-static.yml
  become: yes
  delegate_to: "{{ kvm_install_host }}"
  when: set_dhcp_static|bool or vm_ipaddress | length != 0

