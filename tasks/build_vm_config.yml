---
- name: BUILD_VM_CONFIG setup libguestfs to support deploying rhel8 vm on a rhel7 host
  tags: build_vm
  block:
    - name: BUILD_VM_CONFIG check for presense of libguestfs appliance
      stat:
        path: /export/libguestfs/appliance/kernel
      register: libguestfs_app

    - name: BUILD_VM_CONFIG ensure the direct /export/libguestfs exist
      file:
        path: /export/libguestfs
        state: directory

    - name: BUILD_VM_CONFIG ensure libguestfs appliance is present
      unarchive:
        src: http://download.libguestfs.org/binaries/appliance/appliance-1.40.1.tar.xz
        dest: /export/libguestfs
        remote_src: yes
      when: not libguestfs_app.stat.exists
  when: rhel_release == 8 and ansible_distribution_major_version == '7'

# workaround for issue https://access.redhat.com/solutions/3914591
- name: BUILD_VM_CONFIG deploy virt-customzie wrapper
  template:
    src: qubi-virt-customize.sh.j2
    dest: /usr/local/bin/qubi-virt-customize
    mode: 0755
  tags: build_vm

- name: BUILD_VM_CONFIG copy scripts to KVM host
  copy:
    src: "files/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    mode: 755
    owner: root
  with_items:
    - getvmip
    - attach-libvirt-disk
  delegate_to: "{{ kvm_install_host }}"
  tags: build_vm

- name: BUILD_VM_CONFIG Create VM data dir to store vm information
  file:
    state: directory
    path: "{{ vm_data_dir }}/{{ vm_name }}"
    force: yes
  become: yes
  delegate_to: "{{ kvm_install_host }}"
  tags: build_vm

- name: BUILD_VM_CONFIG setting vm_ip if user provided ip address
  set_fact:
    vm_ip: "{{ vm_ipaddress }}"
  when: vm_ipaddress is defined and vm_ipaddress | length != 0
  tags: build_vm

- name: BUILD_VM_CONFIG generate random mac address
  set_fact:
    vm_mac: "{{ '52:54:00' | random_mac }}"
  when: vm_name not in all_instances.list_vms and vm_mac == ""
  tags: build_vm


- name: BUILD_VM_CONFIG Check if qcow OS image template exist
  stat:
    path: "{{ os_qcow_template }}"
  register: cloud_init_image_exist
  tags: build_vm

- name: BUILD_VM_CONFIG fail if {{ os_qcow_template }} does not exist
  fail:
    msg: |
         The qcow os template {{ os_qcow_template }} does not exist.
         Please verify the variable os_qcow_template is set to the correct path
         or copy {{ cloud_init_vm_image }} to {{ os_qcow_template }}.
  when: cloud_init_image_exist.stat.exists == False
  tags: build_vm

- name: BUILD_VM_CONFIG Generate cloud-init static network config
  template:
    src: network-config.j2
    dest: "{{ cloud_init_network_config }}"
    mode: 0777
  register: user_data_cloud_init
  when: convert_dhcp_to_static|bool
  tags: build_vm

- name: BUILD_VM_CONFIG Generate cloud-init user data
  template:
    src: user-data.j2
    dest: "{{ cloud_init_user_data }}"
    mode: 0777
  register: user_data_cloud_init
  tags: build_vm

- name: BUILD_VM_CONFIG Generate cloud-init meta data
  template:
    src: meta-data.j2
    dest: "{{ cloud_init_meta_data }}"
    mode: 0777
  register: meta_data_cloud_init
  tags: build_vm

- name: BUILD_VM_CONFIG show qcow image
  debug:
    msg: 
      - "cloud_init_vm_image: {{ cloud_init_vm_image }}"
      - "os_disk: {{ os_disk }}"
      - "vm_root_disk_size: {{ vm_root_disk_size }}"
      - "os_qcow_template: {{ os_qcow_template }}"
  tags: build_vm

- name: BUILD_VM_CONFIG check for existing cloud init iso
  stat:
    path: "{{ cloud_init_iso_image }}"
  register: cloud_init_iso
  tags: build_vm

- name: BUILD_VM_CONFIG set cloud-init config files
  set_fact:
    cloud_init_configs: "{{ cloud_init_user_data }} {{ cloud_init_meta_data }} {{ cloud_init_network_config }}"
  when: convert_dhcp_to_static|bool
  tags: build_vm

- name: BUILD_VM_CONFIG Create iso image for cloud init
  shell: "genisoimage -input-charset utf-8 -output {{ cloud_init_iso_image }} -volid cidata -joliet -r {{ cloud_init_configs }}"
  when: user_data_cloud_init.changed or cloud_init_iso.stat.exists == False
  tags: build_vm

- name: BUILD_VM_CONFIG generate {{ vm_name }} ifcfg interface template
  template:
    src: ifcfg.j2
    dest: "{{ vm_ifcfg }}"

- name: BUILD_VM_CONFIG generate virt-install command arguments
  template:
    src: virt-install-cmd.j2
    dest: "{{ vm_virtinstall_script }}"
    mode: 0755
  when: vm_name not in all_instances.list_vms
  tags: build_vm
