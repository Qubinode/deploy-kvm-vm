---
- name: check if VM is reachable on known ip address
  command: ping -c1 {{ vm_ip }}
  register: ping_result
  ignore_errors: yes

- debug:
    msg: |
      DEVICE={{ vm_nic }}
      HWADDR={{ vm_mac }}
      IPADDR={{ vm_ip }}
      GATEWAY={{ vm_gateway }}
      PREFIX={{ vm_mask_prefix }}
    verbosity: 2
    
- name: shutting down {{ vm_name }} to run virt-customize
  shell: |
    result=$(virsh dominfo --domain {{ vm_name }}| awk '/State/ {print $2}')
    if [ $result == 'shut' ];
    then
       echo "shutoff"
    else
      virsh shutdown {{ vm_name }};
    fi
  register: vm_shutdown_status
  until: vm_shutdown_status.stdout.find('shutoff') != -1
  retries: 18
  delay: 3

- name: remove cloud-init from {{ vm_name }}
  command: >
    /usr/local/bin/qubi-virt-customize -a {{ os_disk }} --uninstall cloud-init
  
- name: deploy custom /etc/sysconfig/network-scripts/ifcfg-{{ vm_nic }}
  command: >
    /usr/local/bin/qubi-virt-customize -a {{ os_disk }} --upload {{ vm_ifcfg }}:/etc/sysconfig/network-scripts/ifcfg-{{ vm_nic }}
  register: uploaded_static_ip

- name: configure ssh public key
  command: >
    /usr/local/bin/qubi-virt-customize -a {{ os_disk }} --ssh-inject {{ admin_user }}:file:{{ vm_public_key }}

- name: starting up {{ vm_name }}
  virt:
    name: "{{ vm_name }}"
    state: running

- name: Gather VM ip networking info
  import_tasks: get_ip_info.yml
  become: yes
  delegate_to: "{{ kvm_install_host }}"

- name: Wait for network connectivty to {{ vm_name }}
  wait_for:
    host: "{{ vm_ip }}"
    port: 22
    search_regex: OpenSSH
    delay: 10

- name: check if VM is reachable on known ip address
  command: ping -c1 {{ vm_ip }}
  register: ping_result
  ignore_errors: yes

- fail:
    msg: VM is unreachable
  when: ping_result is failed
