---
- name: convert disk size to bytes
  vars:
    new_disk_size: "{{ vm_root_disk_size }} GB"
    disk_size_in_bytes: "{{ new_disk_size|human_to_bytes }}"
  set_fact:
    wanted_size: "{{ disk_size_in_bytes }}"
    expand_os_disk: "{{ true if disk_size_in_bytes|int > '1073741824'|int else false }}"

- name: DEPLOY_VM ensure {{ os_disk }} exist
  stat:
    path: "{{ os_disk }}"
  register: os_disk_created

- name: DEPLOY_VM {{ vm_name }} disk image
  when: vm_name not in all_instances.list_vms and expand_os_disk|bool
  block:
    - name: DEPLOY_VM Create operating system disk for {{ vm_name }}
      when: not os_disk_created.stat.exists
      command: "qemu-img create -f qcow2 {{ os_disk }} {{ vm_root_disk_size }}G"
      args:
        creates: "{{ os_disk }}"
      register: os_disk_results

    - name: DEPLOY_VM get {{ vm_name }} operating system virtual size
      shell: >
        qemu-img info "{{ os_disk }}" | awk '/disk size/ {print $3}'
      register: os_virtual_disk_size
      changed_when: false

    - name: DEPLOY_VM set os disk size to human readable format
      set_fact:
        os_disk_size: "{{ os_virtual_disk_size.stdout | human_to_bytes }}"

    - name: DEPLOY_VM evaluate if {{ vm_name }} operating system size should be increased
      set_fact:
        grow_fs: "{{ true if os_disk_size|int < wanted_size|int else false }}"

    - name: DEPLOY_VM grow {{ vm_name }} operating system
      command: >
        virt-resize -v -x --expand /dev/sda1 "{{ os_qcow_template }}" "{{ os_disk }}"
      register: resize_os_disk_results
      changed_when: '"Resize operation completed with no errors" in resize_os_disk_results.stdout'
      when: grow_fs|bool

    - name: DEPLOY_VM Grow rhel root filesystem
      command: /usr/local/bin/qubi-virt-customize -a {{ os_disk }} --run-command 'xfs_growfs /'
      register: grow_os_disk_results
      changed_when: '"Finishing off" in grow_os_disk_results.stdout'
      when: "'rhel' in os_release and grow_fs|bool"

    - name: DEPLOY_VM Grow fedora root filesystem
      command: /usr/local/bin/qubi-virt-customize -a {{ os_disk }} --run-command 'resize2fs /dev/sda1'
      register: grow_os_disk_results
      changed_when: '"Finishing off" in grow_os_disk_results.stdout'
      when: "'fedora' in os_release and grow_fs|bool"

- name: DEPLOY_VM Copy {{ vm_qcow_image }} to {{ os_disk }}
  when: vm_name not in all_instances.list_vms and not expand_os_disk|bool
  command: "cp {{ os_qcow_template }} {{ os_disk }}"
  args:
    creates: "{{ os_disk }}"
  register: os_disk_results

- name: DEPLOY_VM deploy VM instance
  command: "bash -x {{ vm_virtinstall_script }}"
  when: vm_name not in all_instances.list_vms
  register: deploy_vm
  failed_when: "('Domain installation does not' in deploy_vm.stderr) or
                ('failed to' in deploy_vm.stderr) or
                ('ERROR' in deploy_vm.stderr) or
                ('usage' in deploy_vm.stderr)"

#- name: waiting for {{ vm_name }} cloud-init to complete
#  shell: |
#    result=$(virsh dominfo --domain {{ vm_name }}| awk '/State/ {print $2}')
#    if [ $result == 'shut' ];
#    then
#       echo "shutoff"
#    else
#       echo "running"
#    fi
#  register: vm_shutdown_status
#  until: vm_shutdown_status.stdout.find('shutoff') != -1
#  retries: 120
#  delay: 5

#- name: Ensure qemu-guest-agent is installed and enabled on {{ vm_name }}
#  shell: |
#    /usr/local/bin/qubi-virt-customize -a {{ os_disk }} --run-command 'echo "systemctl restart qemu-guest-agent" >> /etc/rc.local'
#  register: qemu_guest_agent
#  #changed_when: '"Finishing off" in grow_os_disk_results.stdout'

#- name: starting up {{ vm_name }}
#  shell: |
#    result=$(virsh dominfo --domain {{ vm_name }}| awk '/State/ {print $2}')
#    if [ $result == 'running' ];
#    then
#       echo "running"
#    else
#      virsh start {{ vm_name }};
#    fi
#  register: vm_startup_status
#  until: vm_startup_status.stdout.find('running') != -1
#  retries: 18
#  delay: 5

- debug:
    msg: "{{ deploy_vm }}"
    verbosity: 2

- name: DEPLOY_VM create extra qcow disk
  vars:
    disk_name: "{{ extra_disk_name }}_vd{{ disk_sequence[item | int + count ] }}.qcow2"
  command: >
    dd if=/dev/zero of={{ disk_name }} bs=1 count=0  seek={{ item.size }}
  args:
    creates: "{{ disk_name }}"
  loop: "{{ extra_storage }}"
  loop_control:
    index_var: count
    label: "{{ disk_name }}"
  when: item.enable
  register: extra_disk_created

- debug:
    msg: "{{ extra_disk_created }}"
    verbosity: 2

- name: DEPLOY_VM Attach External Disk
  vars:
    disk_name: "{{ extra_disk_name }}_vd{{ disk_sequence[item | int + count ] }}.qcow2"
    disk: "vd{{ disk_sequence[item | int + count ] }}"
  command: >
    /usr/local/bin/attach-libvirt-disk "{{ vm_name }}" "{{ disk_name }}" "{{ disk }}"
  register: attached_disk
  loop: "{{ extra_storage }}"
  loop_control:
    index_var: count
    label: "{{ disk_name }}"
  when: item.enable
  changed_when: '"Disk attached successfully" in attached_disk.stdout'

#- name: DEPLOY_VM wait for cloud-init to initialize
#  pause:
#    seconds: 50
#  when: vm_name not in all_instances.list_vms

- name: DEPLOY_VM wait for {{ vm_name }} ip address
  command: "/usr/local/bin/getvmip -r {{ vm_name }}"
  until: dhcp_vm_ip.stdout != ""
  ignore_errors: yes
  retries: 200
  delay: 10
  register: dhcp_vm_ip
  changed_when: False
  #when: not convert_dhcp_to_static|bool

- name: add {{ vm_name }} to in memory inventory
  add_host:
    name: "{{ dhcp_vm_ip.stdout }}"
  #  groups: cloud_init_inventory
  when: dhcp_vm_ip.stdout is defined
