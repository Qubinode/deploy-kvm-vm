---
- name: DEPLOY_VM get {{ os_qcow_template }} size
  shell: >
    qemu-img info "{{ os_qcow_template }}" | awk -F'[^0-9]*' '/virtual size/ {print $3}'
  register: qcow_source_size
  changed_when: false

- name: DEPLOY_VM convert disk size to bytes
  vars:
    new_disk_size: "{{ vm_root_disk_size }} GB"
    disk_size_in_bytes: "{{ new_disk_size|human_to_bytes }}"
  set_fact:
    qcow_source_disk_size: "{{ qcow_source_size.stdout }}"
    wanted_size: "{{ disk_size_in_bytes }}"
    expand_os_disk: "{{ true if disk_size_in_bytes|int > qcow_source_size.stdout|int else false }}"

- name: DEPLOY_VM check if {{ vm_name }} disk {{ os_disk }} exist
  stat:
    path: "{{ os_disk }}"
  register: os_disk_created

- name: DEPLOY_VM {{ vm_name }} disk image
  when: vm_name not in all_instances.list_vms and expand_os_disk|bool
  block:
    - name: Copy operating system disk for {{ vm_name }}
      when: not os_disk_created.stat.exists
      command: "cp {{ os_qcow_template }}  {{ os_disk }}"
      args:
        creates: "{{ os_disk }}"
      register: create_os_disk
      environment: 
        LIBGUESTFS_BACKEND: direct

    - name: DEPLOY_VM Create operating system disk for {{ vm_name }}
      command: "qemu-img create -f qcow2 preallocation=metadata {{ os_disk }}.tmp {{ vm_root_disk_size }}"
      args:
        creates: "{{ os_disk }}"
      register: create_os_disk
      environment: 
        LIBGUESTFS_BACKEND: direct

    - name: DEPLOY_VM grow {{ vm_name }} operating system
      command: >
        sudo virt-resize -v -x --expand /dev/sda1 "{{ os_disk }}" "{{ os_disk }}.tmp"
      register: resize_create_os_disk
      environment: 
        LIBGUESTFS_BACKEND: direct
      changed_when: '"Resize operation completed with no errors" in resize_create_os_disk.stdout'

    - name: update qcow image
      command: >
          sudo mv "{{ os_disk }}.tmp" "{{ os_disk }}"

    - name: DEPLOY_VM Grow rhel root filesystem
      command: /usr/local/bin/qubi-virt-customize -a {{ os_disk }} --run-command 'xfs_growfs /'
      register: grow_create_os_disk
      changed_when: '"Finishing off" in grow_create_os_disk.stdout'
      when: "'rhel' in os_release"

    - name: DEPLOY_VM Grow fedora root filesystem
      command: /usr/local/bin/qubi-virt-customize -a {{ os_disk }} --run-command 'resize2fs /dev/sda1'
      register: grow_create_os_disk
      changed_when: '"Finishing off" in grow_create_os_disk.stdout'
      when: "'fedora' in os_release"

- name: DEPLOY_VM Copy {{ vm_qcow_image }} to {{ os_disk }}
  when: vm_name not in all_instances.list_vms and not expand_os_disk|bool
  command: "cp {{ os_qcow_template }} {{ os_disk }}"
  args:
    creates: "{{ os_disk }}"
  register: copy_os_disk

- name: DEPLOY_VM deploy VM instance
  command: "bash -x {{ vm_virtinstall_script }}"
  when: vm_name not in all_instances.list_vms
  register: deploy_vm
  failed_when: "('Domain installation does not' in deploy_vm.stderr) or
                ('failed to' in deploy_vm.stderr) or
                ('ERROR' in deploy_vm.stderr) or
                ('usage' in deploy_vm.stderr)"

- name: DEPLOY_VM create extra qcow disk
  vars:
    disk_name: "{{ extra_disk_name }}_vd{{ disk_sequence[item | int + count ] }}.qcow2"
  command: >
    dd if=/dev/zero of={{ disk_name }} bs=1 count=0  seek={{ item.size }}
  args:
    creates: "{{ disk_name }}"
  loop: "{{ extra_storage }}"
  loop_control:
    index_var: count
    label: "{{ disk_name }}"
  when: item.enable
  register: extra_disk_created

- debug:
    msg: "{{ extra_disk_created }}"
    verbosity: 2

- name: DEPLOY_VM Attach External Disk
  vars:
    disk_name: "{{ extra_disk_name }}_vd{{ disk_sequence[item | int + count ] }}.qcow2"
    disk: "vd{{ disk_sequence[item | int + count ] }}"
  command: >
    /usr/local/bin/attach-libvirt-disk "{{ vm_name }}" "{{ disk_name }}" "{{ disk }}"
  register: attached_disk
  loop: "{{ extra_storage }}"
  loop_control:
    index_var: count
    label: "{{ disk_name }}"
  when: item.enable
  changed_when: '"Disk attached successfully" in attached_disk.stdout'

- name: DEPLOY_VM wait for {{ vm_name }} ip address
  command: "/usr/local/bin/getvmip -r {{ vm_name }}"
  until: dhcp_vm_ip.stdout != ""
  ignore_errors: yes
  retries: 200
  delay: 10
  register: dhcp_vm_ip
  changed_when: False
  when:  use_cloud_init | bool

## adding host to in memory inventory
## two entries will be added, one is for user provided ip
## the other is for the ip issued by DHCP
- name: add {{ vm_name }} user provided ip address to in-memory inventory
  add_host:
    name: "{{ dhcp_vm_ip.stdout }}"
  ignore_errors: yes
  when: vm_ipaddress != ''  and not use_cloud_init | bool

- name: add {{ vm_name }} dhcp issues ip address to in-memory inventory
  add_host:
    name: "{{ dhcp_vm_ip.stdout }}"
  ignore_errors: yes
  when: dhcp_vm_ip.stdout != '' and not use_cloud_init | bool
